// This only tests a successful handshake with the crypto implementation in this module.
// Failures are tested via `./client.js` and `./server.js` against the testsuite
// itself.

const assert = require('assert');

const {createMsg1, verifyMsg2, createMsg3, verifyMsg4, clientOutcome} = require('../crypto-client');
const {verifyMsg1, createMsg2, verifyMsg3, createMsg4, serverOutcome} = require('../crypto-server');

const network_identifier = Buffer.from([111, 97, 159, 86, 19, 13, 53, 115, 66, 209, 32, 84, 255, 140, 143, 85, 157, 74, 32, 154, 156, 90, 29, 185, 141, 19, 184, 255, 104, 107, 124, 198]);
const server_longterm_pk = Buffer.from([42, 190, 113, 153, 16, 248, 187, 195, 163, 201, 187, 204, 86, 238, 66, 151, 52, 115, 160, 4, 244, 1, 12, 76, 170, 129, 66, 12, 202, 54, 1, 70]);

const clientState = {
  client_longterm_sk: Buffer.from([243, 168, 6, 50, 44, 78, 192, 183, 210, 241, 189, 36, 183, 154, 132, 119, 115, 84, 47, 151, 32, 32, 26, 237, 64, 180, 69, 20, 95, 133, 92, 176, 225, 162, 73, 136, 73, 119, 94, 84, 208, 102, 233, 120, 23, 46, 225, 245, 198, 79, 176, 0, 151, 208, 70, 146, 111, 23, 94, 101, 25, 192, 30, 35]),
  client_longterm_pk: Buffer.from([225, 162, 73, 136, 73, 119, 94, 84, 208, 102, 233, 120, 23, 46, 225, 245, 198, 79, 176, 0, 151, 208, 70, 146, 111, 23, 94, 101, 25, 192, 30, 35]),
  client_ephemeral_sk: Buffer.from([80, 169, 55, 157, 134, 142, 219, 152, 125, 240, 174, 209, 225, 109, 46, 188, 97, 224, 193, 187, 198, 58, 226, 193, 24, 235, 213, 214, 49, 55, 213, 104]),
  client_ephemeral_pk: Buffer.from([79, 79, 77, 238, 254, 215, 129, 197, 235, 41, 185, 208, 47, 32, 146, 37, 255, 237, 208, 215, 182, 92, 201, 106, 85, 86, 157, 41, 53, 165, 177, 32]),
  server_longterm_pk,
  network_identifier
};

const serverState = {
  server_longterm_sk: Buffer.from([118, 98, 17, 77, 86, 116, 58, 146, 99, 84, 198, 164, 35, 220, 73, 213, 246, 224, 242, 230, 175, 116, 71, 218, 56, 37, 212, 66, 163, 14, 74, 209, 42, 190, 113, 153, 16, 248, 187, 195, 163, 201, 187, 204, 86, 238, 66, 151, 52, 115, 160, 4, 244, 1, 12, 76, 170, 129, 66, 12, 202, 54, 1, 70]),
  server_longterm_pk,
  server_ephemeral_sk: Buffer.from([176, 248, 210, 185, 226, 76, 162, 153, 239, 144, 57, 206, 218, 97, 2, 215, 155, 5, 223, 189, 22, 28, 137, 85, 228, 233, 93, 79, 217, 203, 63, 125]),
  server_ephemeral_pk: Buffer.from([166, 12, 63, 218, 235, 136, 61, 99, 232, 142, 165, 147, 88, 93, 79, 177, 23, 148, 129, 57, 179, 24, 192, 174, 90, 62, 40, 83, 51, 9, 97, 82]),
  network_identifier
};

const msg1 = createMsg1(clientState);
assert.deepStrictEqual(
  msg1,
  Buffer.from([211, 6, 20, 155, 178, 209, 30, 107, 1, 3, 140, 242, 73, 101, 116, 234, 249, 127, 131, 227, 142, 66, 240, 195, 13, 50, 38, 96, 7, 208, 124, 180, 79, 79, 77, 238, 254, 215, 129, 197, 235, 41, 185, 208, 47, 32, 146, 37, 255, 237, 208, 215, 182, 92, 201, 106, 85, 86, 157, 41, 53, 165, 177, 32]),
  'createMsg1 failed'
);

assert(verifyMsg1(serverState, msg1), 'verifyMsg1 failed');

const msg2 = createMsg2(serverState);
assert.deepStrictEqual(
  msg2,
  Buffer.from([44, 140, 79, 227, 23, 153, 202, 203, 81, 40, 114, 59, 56, 167, 63, 166, 201, 9, 50, 152, 0, 255, 226, 147, 22, 43, 84, 99, 107, 198, 198, 219, 166, 12, 63, 218, 235, 136, 61, 99, 232, 142, 165, 147, 88, 93, 79, 177, 23, 148, 129, 57, 179, 24, 192, 174, 90, 62, 40, 83, 51, 9, 97, 82]),
  'createMsg2 failed'
);

assert(verifyMsg2(clientState, msg2), 'verifyMsg2 failed');

const msg3 = createMsg3(clientState);
assert.deepStrictEqual(
  msg3,
  Buffer.from([80, 34, 24, 195, 46, 211, 235, 66, 91, 89, 65, 98, 137, 26, 86, 197, 32, 4, 153, 142, 160, 18, 56, 180, 12, 171, 127, 38, 44, 53, 74, 64, 55, 188, 22, 25, 161, 25, 7, 243, 200, 196, 145, 249, 207, 211, 88, 178, 0, 206, 173, 234, 188, 20, 251, 240, 199, 169, 94, 180, 212, 32, 150, 226, 138, 44, 141, 235, 33, 152, 91, 215, 31, 126, 48, 48, 220, 239, 97, 225, 103, 79, 190, 56, 227, 103, 142, 195, 124, 10, 21, 76, 66, 11, 194, 11, 220, 15, 163, 66, 138, 232, 228, 12, 130, 172, 4, 137, 52, 159, 64, 98]),
  'createMsg3 failed'
);

assert(verifyMsg3(serverState, msg3), 'verifyMsg3 failed');

const msg4 = createMsg4(serverState);
assert.deepStrictEqual(
  msg4,
  Buffer.from([72, 114, 92, 105, 109, 48, 17, 14, 25, 150, 242, 50, 148, 70, 49, 25, 222, 254, 255, 124, 194, 144, 84, 114, 190, 148, 252, 189, 159, 132, 157, 173, 92, 14, 247, 198, 87, 232, 141, 83, 84, 79, 226, 43, 194, 95, 14, 8, 138, 233, 96, 40, 126, 153, 205, 36, 95, 203, 200, 202, 221, 118, 126, 99, 47, 216, 209, 219, 3, 133, 240, 216, 166, 182, 182, 226, 215, 116, 177, 66]),
  'createMsg4 failed'
);

assert(verifyMsg4(clientState, msg4), 'verifyMsg4 failed');

assert.deepStrictEqual(
  clientOutcome(clientState),
  {
    encryption_key: Buffer.from([162, 29, 153, 150, 123, 225, 10, 173, 175, 201, 160, 34, 190, 179, 158, 14, 176, 105, 232, 238, 97, 66, 133, 194, 250, 148, 199, 7, 34, 157, 174, 24]),
    encryption_nonce: Buffer.from([44, 140, 79, 227, 23, 153, 202, 203, 81, 40, 114, 59, 56, 167, 63, 166, 201, 9, 50, 152, 0, 255, 226, 147]),
    decryption_key: Buffer.from([125, 136, 153, 7, 109, 241, 239, 84, 228, 176, 141, 23, 58, 129, 90, 228, 188, 93, 191, 224, 209, 67, 147, 187, 45, 204, 178, 17, 77, 225, 117, 98]),
    decryption_nonce: Buffer.from([211, 6, 20, 155, 178, 209, 30, 107, 1, 3, 140, 242, 73, 101, 116, 234, 249, 127, 131, 227, 142, 66, 240, 195])
  },
  'clientOutcome failed'
);
assert.deepStrictEqual(
  serverOutcome(serverState),
  {
    encryption_key: Buffer.from([125, 136, 153, 7, 109, 241, 239, 84, 228, 176, 141, 23, 58, 129, 90, 228, 188, 93, 191, 224, 209, 67, 147, 187, 45, 204, 178, 17, 77, 225, 117, 98]),
    encryption_nonce: Buffer.from([211, 6, 20, 155, 178, 209, 30, 107, 1, 3, 140, 242, 73, 101, 116, 234, 249, 127, 131, 227, 142, 66, 240, 195]),
    decryption_key: Buffer.from([162, 29, 153, 150, 123, 225, 10, 173, 175, 201, 160, 34, 190, 179, 158, 14, 176, 105, 232, 238, 97, 66, 133, 194, 250, 148, 199, 7, 34, 157, 174, 24]),
    decryption_nonce: Buffer.from([44, 140, 79, 227, 23, 153, 202, 203, 81, 40, 114, 59, 56, 167, 63, 166, 201, 9, 50, 152, 0, 255, 226, 147])
  },
  'serverOutcome failed'
);
